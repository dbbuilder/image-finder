openapi: 3.0.3
info:
  title: Product Image API
  description: |
    A REST API service for product image discovery, processing, and storage. 
    This API finds matching images for products, processes them with watermarks, 
    and stores them in Azure Blob Storage with intelligent fallbacks.
    
    ## Features
    - Multi-provider image search (Google Images, Pixabay, Unsplash, Pexels)
    - AI-generated fallback images using OpenAI DALL-E
    - Intelligent caching system
    - Image processing with watermarks
    - Azure Blob Storage integration
    
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://your-domain.com/api
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

security:
  - bearerAuth: []

paths:
  /product-image:
    post:
      tags:
        - Product Images
      summary: Create or generate a product image
      description: |
        Finds, processes, and stores a product image based on provided identifiers.
        The API will search multiple image sources and fallback to AI generation if needed.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductImageRequest'
            examples:
              laptop:
                summary: Laptop example
                value:
                  productId: "LAP-001"
                  productType: "Laptop"
                  brand: "TechBrand"
                  description: "15-inch gaming laptop with RTX graphics"
              book:
                summary: Book example
                value:
                  productId: "BOOK-123"
                  productType: "Book"
                  isbn: "9781234567897"
                  description: "Programming guide for beginners"
              upc:
                summary: UPC example
                value:
                  productId: "UPC-456"
                  productType: "Electronics"
                  upc: "123456789012"
                  brand: "Samsung"
      responses:
        '201':
          description: Image created and stored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResponse'
              example:
                success: true
                imageUrl: "https://yourstorage.blob.core.windows.net/products/temp-LAP-001.png"
                fileName: "temp-LAP-001.png"
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Product ID is required"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No suitable image found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "No suitable image found for the provided criteria"
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /product-image/{productId}:
    get:
      tags:
        - Product Images
      summary: Check if product image exists
      description: Verifies if a processed image exists for the given product ID
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique product identifier
          schema:
            type: string
          example: "LAP-001"
      responses:
        '200':
          description: Image exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageExistsResponse'
              example:
                exists: true
                imageUrl: "https://yourstorage.blob.core.windows.net/products/temp-LAP-001.png"
                fileName: "temp-LAP-001.png"
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageNotFoundResponse'
              example:
                exists: false
                message: "Image not found"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Product Images
      summary: Delete product image
      description: Removes a product image from storage
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique product identifier
          schema:
            type: string
          example: "LAP-001"
      responses:
        '200':
          description: Image deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
              example:
                success: true
                message: "Image deleted successfully"
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
              example:
                success: false
                message: "Image not found"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/cache/clear:
    post:
      tags:
        - Administration
      summary: Clear image cache
      description: Clears the entire image cache (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cache cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminResponse'
              example:
                success: true
                message: "Image cache cleared successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/cache/stats:
    get:
      tags:
        - Administration
      summary: Get cache statistics
      description: Returns cache usage statistics (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cache statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminResponse'
              example:
                success: true
                message: "Cache statistics endpoint (not implemented yet)"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Returns the current health status of the API
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: API key authentication using Bearer token

  schemas:
    CreateProductImageRequest:
      type: object
      required:
        - productId
      properties:
        productId:
          type: string
          description: Unique identifier for the product
          example: "LAP-001"
        productType:
          type: string
          description: Type of product
          example: "Laptop"
        upc:
          type: string
          pattern: '^\d{12}$'
          description: Universal Product Code (12 digits)
          example: "123456789012"
        isbn:
          type: string
          pattern: '^97[89]\d{10}$'
          description: International Standard Book Number (13 digits)
          example: "9781234567897"
        description:
          type: string
          maxLength: 500
          description: Product description
          example: "15-inch gaming laptop with RTX graphics"
        brand:
          type: string
          description: Brand or product line
          example: "TechBrand"
      additionalProperties: false

    ImageResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        imageUrl:
          type: string
          format: uri
          description: URL to the stored image
          example: "https://yourstorage.blob.core.windows.net/products/temp-LAP-001.png"
        fileName:
          type: string
          description: Name of the stored file
          example: "temp-LAP-001.png"

    ImageExistsResponse:
      type: object
      properties:
        exists:
          type: boolean
          example: true
        imageUrl:
          type: string
          format: uri
          description: URL to the stored image (if exists)
          example: "https://yourstorage.blob.core.windows.net/products/temp-LAP-001.png"
        fileName:
          type: string
          description: Name of the stored file (if exists)
          example: "temp-LAP-001.png"

    ImageNotFoundResponse:
      type: object
      properties:
        exists:
          type: boolean
          example: false
        message:
          type: string
          example: "Image not found"

    DeleteResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    AdminResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        details:
          type: string
          description: Additional error details (optional)

  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Unauthorized: API key required"

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Rate limit exceeded. Try again later."
      headers:
        RateLimit-Limit:
          description: Request limit per window
          schema:
            type: integer
            example: 25
        RateLimit-Remaining:
          description: Requests remaining in current window
          schema:
            type: integer
            example: 0
        RateLimit-Reset:
          description: Time when rate limit resets (seconds)
          schema:
            type: integer
            example: 60

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Internal server error"
            details: "Failed to process image request"

tags:
  - name: Product Images
    description: Operations for creating, retrieving, and managing product images
  - name: Administration
    description: Administrative operations for cache management
  - name: System
    description: System health and status endpoints